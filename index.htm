<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<style type="text/css">
		body {
			background-color: #555;
			margin: 20px;
		}
		canvas {
			border: 1px solid black;
			position: relative;
			width: 100%;
			height: 100%;

			/* none of these do fuck all, except the firefox one */

			/*image-rendering:optimizeSpeed;   */          /* Legal fallback */
			image-rendering:-moz-crisp-edges;          /* Firefox        */
			/*image-rendering:-o-crisp-edges; */           /* Opera          */
			/*image-rendering:-webkit-optimize-contrast;*/ /* Safari         */
			/*image-rendering:optimize-contrast;  */       /* CSS3 Proposed  */
			/*image-rendering:crisp-edges; */              /* CSS4 Proposed  */
			/*image-rendering:pixelated; */                /* CSS4 Proposed  */
			/*-ms-interpolation-mode:nearest-neighbor;*/   /* IE8+           */
			/*-ms-interpolation-mode:bicubic; */			/* another ie? */
			
		}
		p {
			font-family: Arial, sans-serif;
			font-size: 10px;
			color: #aaa;
		}
	</style>
</head>
<body>
	<canvas id="viewPort">
		Get outta here with that old browser, hippy.
	</canvas>
	<p>
		<span id="info1"></span><br>
		<span id="info2"></span>
	</p>
	<p>
		Keys:<br>
		Forward = W or Up<br>
		Back = S or Down<br>
		Strafe Left = A<br>
		Strafe Right = D<br>
		Turn Left = Left<br>
		Turn Right = Right<br>
		Sprint = Shift<br>
		Toggle Show Map (<span id="info3"></span>) = M<br>
		Toggle Show Rays (<span id="info4"></span>) = R<br>
		Toggle God Mode (<span id="info5"></span>) = G<br>
		Full Screen = Enter (ESC to cancel)
		Mouse Control = Left-click (ESC to cancel)
	</p>
	<p>
		<span id="info6"></span><br>
		<span id="info7"></span>
	</p>
	<script type="text/javascript">

/* 

bugs:

--the textures starts halfway through a pixel, or maybe it differs depending on res, and ends halfway through a pixel, you can see the seams
--the fisheye correction seems to warp it the other way, esp at big fovs
--game minimap is scaled up with mapScale value, making it useless at higher values
--in chrome, fullscreen is showing it squashed horizontally, even though it worked fine at first
--in chrome and ie11, css scaling the canvas makes everything blurry
--in ie11, pointer lock api doesn't work
--in ie11, fullscreen api doesn't work

to-do, immediate:

--button to turn bilinear filtering on/off
--page layout so the text is still at the side, while canvas expands to fill as much as possible
--mouse control

to-do, near future:

--better collisions with walls
--add controls to adjust fov, fisheye correction, and other maths stuff in real time
--texture map floor and ceiling
--add distance shading / fog
--variable height walls
--2d sprites (objects, enemies, collectables)
--jumping
--crouching
--look up and down
--level ends / progression
--shooting button / animation

to-do, far future / probably never:

--reflected textures should be upside down
--figure out why the " - 0.00000001" fix for the walls bug even works
--adjust wall height
--adjust camera height
--allow zooming into map, with scrolling
--code refactoring
--better fps counter
--column width should tie into vertical resolution somehow
--pushable walls or other secrets
--map editor
--handle player going outside the map better (god mode)
--fix the crash if player enters top row of map (y = 0)
--player gun gfx and ui etc
--shooting guns with hitscan
--shooting/throwing other projectiles
--portals!
--different weapons
--textures with gaps in them
--coloured lighting
--view bobbing
--stairs, eg rooms higher than others
--non-90 degree walls (doom), non-grid walls (wolf doors)
--rooms directly above other rooms (duke 3d)
--ai bots movement, shooting, etc
--health, ammo
--inventory
--switches
--sky-box
--music & sfx
--multiplayer
--vehicles
--presentation / story
--3d & vr support

*/

var map = [
[ 2, 2, 2, 2,17, 2, 2, 2, 2, 2,11, 2, 2, 2, 2,17, 2, 2, 2, 2, 2, 2, 2, 2, 2,11, 2, 2, 2, 2, 2, 2], 
[ 2, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], 
[ 2, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,16, 0,10, 0,10, 0,10, 0,10, 0, 0, 0, 2], 
[ 2, 0, 5, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,10, 0,10,18,10,16,10,18,10,10,10, 0, 2], 
[ 2, 0,24, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,10, 0, 2], 
[ 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0,16, 0, 2], 
[11, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,17, 0, 0, 0, 0, 0, 0, 0, 0, 0,10, 0,11], 
[ 2, 0, 5, 4,17, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,10, 0, 2], 
[ 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,18, 0, 2], 
[ 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,10, 0, 2], 
[ 2, 0, 5, 0, 1, 1, 1, 1, 1,21, 1, 1, 1, 1, 1, 1, 1, 1, 1,21, 1, 1, 1, 1, 0, 0, 0, 0, 0,10, 0, 2], 
[ 2, 0,23, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0,17, 0, 0, 0, 0, 0,16, 0, 2], 
[ 2, 0, 5, 0,19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,10, 0, 2], 
[ 2, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,10, 0, 2], 
[ 2, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,24, 0, 0, 0, 0, 0, 0, 0, 0, 0,20, 0, 0, 0, 0, 0,18, 0, 2], 
[11, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,10, 0,11], 
[ 2, 0, 5, 0, 1, 0, 0, 0, 0, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,10, 0, 2], 
[ 2, 0,22, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,16, 0, 2], 
[ 2, 0, 5, 0,20, 0, 0, 0, 0,22, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,19, 0, 0, 0, 0, 0,10, 0, 2], 
[17, 0, 5, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,10, 0, 2], 
[ 2, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,10, 0, 2], 
[ 2, 0, 5, 0, 1, 1, 1,21, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], 
[ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,19, 1, 1, 1, 1, 0, 0, 0, 0, 0,10,16, 2], 
[11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,11], 
[ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,14,13,13,14,13, 0,13,14,13, 0,13,14,13,13,14, 0, 2], 
[ 2, 9, 9, 9, 9, 9, 0, 0, 7, 7, 7, 7,12, 7, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 2], 
[ 2, 0, 0, 0, 0, 9, 0, 0,12, 0, 0, 0, 0, 7, 0,15, 0, 0, 0, 0, 0, 0,15, 0, 0, 0, 0, 0, 0,15, 0, 2], 
[ 2, 0, 0, 0, 0, 9, 0, 0, 7, 0, 0, 0, 0, 7, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 2], 
[ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0,15, 0, 0, 0, 0, 0, 0,15, 0, 0, 0, 0, 0, 0,15, 0, 2], 
[ 2, 0, 0, 0, 0, 9, 0, 0, 7, 0, 0, 0, 0, 7, 0, 3, 3, 3,15, 3,15, 3, 3, 3,15, 3,15, 3, 3, 3, 0, 2], 
[ 2, 0, 0, 0, 0, 9, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], 
[ 2, 2, 2,11, 2, 2, 2, 2, 2, 2,11, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 
];

// dev options
var godMode = 0;
var showMap = 0;
var showRays = 0;
var showCrosshairs = 0;

var showMapToggleHeld = false;
var showRaysToggleHeld = false;
var godModeToggleHeld = false;

// colours
var colorPlyrMap = "rgba(255,255,255,0.5)"; // player marker on the minimap
var colorRays = "rgba(255,0,0,0.1)"; // rays on the minimap
var colorSky = "rgb(56,56,56)"; // wolf3d ceiling
var colorGround = "rgb(18,18,18)"; // black (wofl3d floor is 113,113,113)
var colorReflect = "rgb(9,9,9)"; // dark black

// dom, map and viewport
var mapW = map[0].length;	// number of tiles horizontally
var mapH = map.length;		// number of tiles vertically
var mapScale = 128;
var canvas = document.getElementById("viewPort");
canvas.width = 640;
canvas.height = 360;
var ctx = canvas.getContext("2d");
ctx.imageSmoothingEnabled = false;
ctx.mozImageSmoothingEnabled = false;
ctx.webkitImageSmoothingEnabled = false;
ctx.msImageSmoothingEnabled = false;
var info1 = document.getElementById("info1");
var info2 = document.getElementById("info2");
var info3 = document.getElementById("info3");
var info4 = document.getElementById("info4");
var info5 = document.getElementById("info5");
var info6 = document.getElementById("info6");
var walls = new Image();
walls.src = "wolfwalls_hires2.png";
var gun = new Image();
gun.src = "pistol1.png";
var groundReflect = 1;		// ground reflects the walls
var higherWalls = 0;		// all walls are drawn double height

// player
var plyrX = 1.5 * mapScale;		// x position (grid position * map scale)
var plyrY = 14.5 * mapScale;	// y position (grid position * map scale)
var plyrR = Math.PI * 0.5;		// rotation angle, clockwise, where 0 is facing right, in radians
var plyrS = 0;					// 0 is stationary, positive is moving forward, negative is moving backwards
var plyrMoveSpeed = mapScale / 16;
var plyrMoveSprint = mapScale / 8;
var plyrTurnSpeed = 0.03;
var plyrMouseSpeed = 0.05;

// key binding
var keysDown = [];
document.onkeydown = function(e) { keysDown[e.which] = true; }
document.onkeyup = function(e) { keysDown[e.which] = false; }

// pointer lock api (mouse)
// see: http://www.html5rocks.com/en/tutorials/pointerlock/intro/
// and: https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API
document.addEventListener("pointerlockchange", lockChangeAlert, false);
document.addEventListener("mozpointerlockchange", lockChangeAlert, false);
document.addEventListener("webkitpointerlockchange", lockChangeAlert, false);
function lockChangeAlert () {
	if (document.pointerLockElement === canvas ||
		document.mozPointerLockElement === canvas ||
		document.webkitPointerLockElement === canvas) {
		showCrosshairs = 1;
	} else {
		showCrosshairs = 0;
	}
}
canvas.requestPointerLock = canvas.requestPointerLock ||
                            canvas.mozRequestPointerLock ||
                            canvas.webkitRequestPointerLock;
canvas.onclick = function() {
	canvas.requestPointerLock();
}

// fullscreen api
// see: https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode
// haven't checked in other browsers, it will display differently in each
document.addEventListener("keydown", function(e) { // enter key
	if (e.keyCode == 13) {
		if (canvas.requestFullscreen) {
			canvas.requestFullscreen();
		} else if (canvas.msRequestFullscreen) {
			canvas.msRequestFullscreen();
		} else if (canvas.mozRequestFullScreen) {
			canvas.mozRequestFullScreen();
		} else if (canvas.webkitRequestFullscreen) {
			canvas.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
		}
	}
}, false);

// ray casting
var pi = Math.PI;				// caching pi
var twoPi = pi * 2;				// one full revolution in radians
var halfPi = pi / 2;			// another cache
var morePi = pi * 1.5;			// yep it's a cache
var fov = 60 * pi / 180;		// this is a fov of 60, converted to radians (comes to 1.04719755)
var colWidth = 1;				// how many pixels wide each column is on screen, highest res being 1
var numRays = canvas.width / colWidth;	// this is just screen width / column width
var angleInc = fov / numRays;	// angle increment for each ray (fov / numRays = 0.00327249234375)
var camDist = (canvas.width / 2) / Math.tan(fov / 2);	// the camera (player) distance to the screen (half of screen width / tan(half of fov))

// fps counter
var oldTime = +new Date();
var totalFPS = 0;
var iterCount = 0;

function gameCycle() {

	if (keysDown[38] || keysDown[87]) { // up or w
		if (keysDown[16]) {
			plyrS = plyrMoveSprint;
		} else {
			plyrS = plyrMoveSpeed;
		}

		// calculate potential new player position
		var newX = plyrX + Math.cos(plyrR) * plyrS;
		var newY = plyrY - Math.sin(plyrR) * plyrS;

		// check if we're allowed to move to this new position
		// this collision detection is lame, see my older games for a better one
		if (godMode == 1 || map[Math.floor(newY / mapScale)][Math.floor(newX / mapScale)] == 0 || map[Math.floor(newY / mapScale)][Math.floor(newX / mapScale)] == 6) {
			plyrX = newX;
			plyrY = newY;
		}
	} 
	else if (keysDown[40] || keysDown[83]) { // down or s
		if (keysDown[16]) {
			plyrS = -plyrMoveSprint;
		} else {
			plyrS = -plyrMoveSpeed;
		}

		// calculate potential new player position
		var newX = plyrX + Math.cos(plyrR) * plyrS;
		var newY = plyrY - Math.sin(plyrR) * plyrS;

		// check if we're allowed to move to this new position
		// this collision detection is lame, see my older games for a better one
		if (godMode == 1 || map[Math.floor(newY / mapScale)][Math.floor(newX / mapScale)] == 0 || map[Math.floor(newY / mapScale)][Math.floor(newX / mapScale)] == 6) {
			plyrX = newX;
			plyrY = newY;
		}
	} 
	else { plyrS = 0; }

	if (keysDown[37]) { plyrR += plyrTurnSpeed; } // left
	if (keysDown[39]) { plyrR -= plyrTurnSpeed; } // right

	if (keysDown[65]) {  // a
		if (keysDown[16]) {
			plyrS = plyrMoveSprint;
		} else {
			plyrS = plyrMoveSpeed;
		}

		// calculate potential new player position
		var newX = plyrX + Math.cos(plyrR + halfPi) * plyrS;
		var newY = plyrY - Math.sin(plyrR + halfPi) * plyrS;

		// check if we're allowed to move to this new position
		// this collision detection is lame, see my older games for a better one
		if (godMode == 1 || map[Math.floor(newY / mapScale)][Math.floor(newX / mapScale)] == 0 || map[Math.floor(newY / mapScale)][Math.floor(newX / mapScale)] == 6) {
			plyrX = newX;
			plyrY = newY;
		}
	}
	if (keysDown[68]) { // d
		if (keysDown[16]) {
			plyrS = -plyrMoveSprint;
		} else {
			plyrS = -plyrMoveSpeed;
		}

		// calculate potential new player position
		var newX = plyrX + Math.cos(plyrR + halfPi) * plyrS;
		var newY = plyrY - Math.sin(plyrR + halfPi) * plyrS;

		// check if we're allowed to move to this new position
		// this collision detection is lame, see my older games for a better one
		if (godMode == 1 || map[Math.floor(newY / mapScale)][Math.floor(newX / mapScale)] == 0 || map[Math.floor(newY / mapScale)][Math.floor(newX / mapScale)] == 6) {
			plyrX = newX;
			plyrY = newY;
		}
	}

	// toggle keys

	if (keysDown[77]) { // m
		if (!showMapToggleHeld) {
			if (showMap) {
				showMap = 0;
				showMapToggleHeld = true;
			} else {
				showMap = 1;
				showMapToggleHeld = true;
			}
		}
	} else {
		showMapToggleHeld = false;
	}

	if (keysDown[82]) { // r
		if (!showRaysToggleHeld) {
			if (showRays) {
				showRays = 0;
				showRaysToggleHeld = true;
			} else {
				showRays = 1;
				showRaysToggleHeld = true;
			}
		}
	} else {
		showRaysToggleHeld = false;
	}

	if (keysDown[71]) { // g
		if (!godModeToggleHeld) {
			if (godMode) {
				godMode = 0;
				godModeToggleHeld = true;
			} else {
				godMode = 1;
				godModeToggleHeld = true;
			}
		}
	} else {
		godModeToggleHeld = false;
	}

	// make sure angle stays consistent
	if (plyrR < 0) { 
		plyrR += twoPi;
	} else if (plyrR > twoPi) {
		plyrR -= twoPi;
	}

	// clear screen and draw background for 3d view
	ctx.clearRect(0, 0, canvas.width, canvas.height);
	ctx.fillStyle = colorSky;
	ctx.fillRect(0, 0, canvas.width, canvas.height);
	ctx.fillStyle = colorGround;
	ctx.fillRect(0, canvas.height / 2, canvas.width, canvas.height / 2);

	// ray casting!

	var rayAngle = plyrR + (fov / 2);	

	for (var i = 0; i < numRays; i++) {
	
		// set these to be a larger distance than any wall could be from the player
		// this is so when a ray finds a hit it will be closer and take priority
		var rayVertWallDist = 99999999;
		var rayHoriWallDist = 99999999;
	
		// make sure ray angle stays consistent
		if (rayAngle < 0) { 
			rayAngle += twoPi;
		} else if (rayAngle > twoPi) {
			rayAngle -= twoPi;
		}

		// horizontal walls

		// is this ray going upwards or downwards?
		if (rayAngle < pi) {
			var rayDir = "up";
			var Ay = Math.floor(plyrY / mapScale) * mapScale - 0.00000001;
			var Ya = mapScale;
			var Xa = mapScale / Math.tan(rayAngle);
		} else {
			var rayDir = "down";
			var Ay = Math.floor(plyrY / mapScale) * mapScale + mapScale;
			var Ya = -mapScale;
			var Xa = -mapScale / Math.tan(rayAngle);
		}
		var Ax = plyrX + (plyrY - Ay) / Math.tan(rayAngle);

		// check if grid x is within the boundaries of the world
		if (Math.floor(Ax / mapScale) >= 0 && Math.floor(Ax / mapScale) <= (mapW - 1)) {

			// at this intersection, is the tile a wall?
			if (map[Math.floor(Ay / mapScale)][Math.floor(Ax / mapScale)] != 0) {

				// yes it was a wall, save the coords, dir, type, and find distance of this ray
				var rayHoriWallX = Ax;
				var rayHoriWallY = Ay;
				var rayHoriWallDir = rayDir;
				var rayHoriWallType = map[Math.floor(Ay / mapScale)][Math.floor(Ax / mapScale)];
				rayHoriWallDist = (plyrX - Ax) * (plyrX - Ax) + (plyrY - Ay) * (plyrY - Ay);

			} else {

				// no it wasn't a wall, so we need to check the next intersection points
				while (1) {

					// so the next intersection should be here
					Ax += Xa;
					Ay -= Ya;

					// check if grid x is within the boundaries of the world
					if (Math.floor(Ax / mapScale) >= 0 && Math.floor(Ax / mapScale) <= (mapW - 1)) {

						// let's check for a wall again
						if (map[Math.floor(Ay / mapScale)][Math.floor(Ax / mapScale)] != 0) {

							// yes it was a wall, save the coords, dir, type, and find distance of this ray
							var rayHoriWallX = Ax;
							var rayHoriWallY = Ay;
							var rayHoriWallDir = rayDir;
							var rayHoriWallType = map[Math.floor(Ay / mapScale)][Math.floor(Ax / mapScale)];
							rayHoriWallDist = (plyrX - Ax) * (plyrX - Ax) + (plyrY - Ay) * (plyrY - Ay);
							break;
						}

					} else {
						break;
					}
				}
			}
		} else {
		}

		// vertical walls

		// is this ray going left or right?
		if (rayAngle > halfPi && rayAngle < morePi) {
			var rayDir = "left";
			var Bx = Math.floor(plyrX / mapScale) * mapScale - 0.00000001;
			var Xa = -mapScale;
			var Ya = -mapScale * Math.tan(rayAngle);
		} else {
			var rayDir = "right";
			var Bx = Math.floor(plyrX / mapScale) * mapScale + mapScale;
			var Xa = mapScale;
			var Ya = mapScale * Math.tan(rayAngle);
		}
		var By = plyrY - (Bx - plyrX) * Math.tan(rayAngle);

		// check if grid y is within the boundaries of the world
		if (Math.floor(By / mapScale) >= 0 && Math.floor(By / mapScale) <= (mapH - 1)) {

			// at this intersection, is the tile a wall?
			if (map[Math.floor(By / mapScale)][Math.floor(Bx / mapScale)] != 0) {
				
				// yes it was a wall, save the coords, dir, type, and find distance of this ray
				var rayVertWallX = Bx;
				var rayVertWallY = By;
				var rayVertWallDir = rayDir;
				var rayVertWallType = map[Math.floor(By / mapScale)][Math.floor(Bx / mapScale)];
				rayVertWallDist = (plyrX - Bx) * (plyrX - Bx) + (plyrY - By) * (plyrY - By);

			} else {			
				
				// no it wasn't a wall, so we need to check the next intersection points
				while (1) {

					// so the next intersection should be here
					Bx += Xa;
					By -= Ya;

					// check if grid y is within the boundaries of the world
					if (Math.floor(By / mapScale) >= 0 && Math.floor(By / mapScale) <= (mapH - 1)) {

						// let's check for a wall again
						if (map[Math.floor(By / mapScale)][Math.floor(Bx / mapScale)] != 0) {

							// yes it was a wall, save the coords, dir, type, and find distance of this ray
							var rayVertWallX = Bx;
							var rayVertWallY = By;
							var rayVertWallDir = rayDir;
							var rayVertWallType = map[Math.floor(By / mapScale)][Math.floor(Bx / mapScale)];
							rayVertWallDist = (plyrX - Bx) * (plyrX - Bx) + (plyrY - By) * (plyrY - By);
							break;
						}

					} else {
						break;
					}
				}
			}
		}

		// which wall is closer?
		if (rayHoriWallDist < rayVertWallDist) {

			// horizontal is closer
			var lineToX = rayHoriWallX;
			var lineToY = rayHoriWallY;
			var wallDir = rayHoriWallDir;
			var wallType = rayHoriWallType;
			var wallDist = Math.sqrt(rayHoriWallDist);
			var textureSliceCoord = rayHoriWallX % mapScale;

		} else {
			
			// vertical is closer
			var lineToX = rayVertWallX;
			var lineToY = rayVertWallY;
			var wallDir = rayVertWallDir;
			var wallType = rayVertWallType;
			var wallDist = Math.sqrt(rayVertWallDist);
			var textureSliceCoord = rayVertWallY % mapScale;
		}

		// fix fisheye effect
		// not very good, causes other distortion
		wallDist = wallDist * Math.cos(rayAngle - plyrR);

		// calculate height of this wall slice
		// (actual slice height / distance to the slice) * distance to projection plane
		var sliceHeight = (mapScale / wallDist) * camDist;

		// find which colour wall to show, depending on wall type and direction
		switch (wallType) {
			case 1: // grey stones
				switch (wallDir) {
					case "up":  // wall is facing south
						var wallsX = 0; 
						var wallsY = 0; 
						break;
					case "down": // wall is facing north
						var wallsX = 0; 
						var wallsY = 0; 
						break;
					case "left": // wall is facing east
						var wallsX = 128; 
						var wallsY = 0; 
						break;
					case "right": // wall is facing west
						var wallsX = 128; 
						var wallsY = 0; 
						break;
				}
				break;
			case 19: // grey stones decoration 1
				switch (wallDir) {
					case "up":  // wall is facing south
						var wallsX = 256; 
						var wallsY = 0; 
						break;
					case "down": // wall is facing north
						var wallsX = 256; 
						var wallsY = 0; 
						break;
					case "left": // wall is facing east
						var wallsX = 384; 
						var wallsY = 0; 
						break;
					case "right": // wall is facing west
						var wallsX = 384; 
						var wallsY = 0; 
						break;
				}
				break;
			case 20: // grey stones decoration 2
				switch (wallDir) {
					case "up":  // wall is facing south
						var wallsX = 512; 
						var wallsY = 0; 
						break;
					case "down": // wall is facing north
						var wallsX = 512; 
						var wallsY = 0; 
						break;
					case "left": // wall is facing east
						var wallsX = 640; 
						var wallsY = 0; 
						break;
					case "right": // wall is facing west
						var wallsX = 640; 
						var wallsY = 0; 
						break;
				}
				break;
			case 21: // grey stones decoration 3
				switch (wallDir) {
					case "up":  // wall is facing south
						var wallsX = 768; 
						var wallsY = 0; 
						break;
					case "down": // wall is facing north
						var wallsX = 768; 
						var wallsY = 0; 
						break;
					case "left": // wall is facing east
						var wallsX = 896; 
						var wallsY = 0; 
						break;
					case "right": // wall is facing west
						var wallsX = 896; 
						var wallsY = 0; 
						break;
				}
				break;
			case 2: // red brick
				switch (wallDir) {
					case "up":
						var wallsX = 512; 
						var wallsY = 256; 
						break;
					case "down":
						var wallsX = 512; 
						var wallsY = 256; 
						break;
					case "left":
						var wallsX = 640; 
						var wallsY = 256; 
						break;
					case "right":
						var wallsX = 640; 
						var wallsY = 256; 
						break;
				}
				break;
			case 11: // red brick decoration
				switch (wallDir) {
					case "up":
						var wallsX = 768; 
						var wallsY = 256; 
						break;
					case "down":
						var wallsX = 768; 
						var wallsY = 256; 
						break;
					case "left":
						var wallsX = 896; 
						var wallsY = 256; 
						break;
					case "right":
						var wallsX = 896; 
						var wallsY = 256; 
						break;
				}
				break;
			case 3: // blue brick
				switch (wallDir) {
					case "up":
						var wallsX = 0; 
						var wallsY = 256; 
						break;
					case "down":
						var wallsX = 0; 
						var wallsY = 256; 
						break;
					case "left":
						var wallsX = 128; 
						var wallsY = 256; 
						break;
					case "right":
						var wallsX = 128; 
						var wallsY = 256; 
						break;
				}
				break;
			case 15: // blue brick decoration
				switch (wallDir) {
					case "up":
						var wallsX = 256; 
						var wallsY = 256; 
						break;
					case "down":
						var wallsX = 256; 
						var wallsY = 256; 
						break;
					case "left":
						var wallsX = 384; 
						var wallsY = 256; 
						break;
					case "right":
						var wallsX = 384; 
						var wallsY = 256; 
						break;
				}
				break;
			case 13: // blue wall
				switch (wallDir) {
					case "up":
						var wallsX = 0; 
						var wallsY = 896; 
						break;
					case "down":
						var wallsX = 0; 
						var wallsY = 896; 
						break;
					case "left":
						var wallsX = 128; 
						var wallsY = 896; 
						break;
					case "right":
						var wallsX = 128; 
						var wallsY = 896; 
						break;
				}
				break;
			case 14: // blue wall decoration
				switch (wallDir) {
					case "up":
						var wallsX = 256; 
						var wallsY = 896; 
						break;
					case "down":
						var wallsX = 256; 
						var wallsY = 896; 
						break;
					case "left":
						var wallsX = 384; 
						var wallsY = 896; 
						break;
					case "right":
						var wallsX = 384; 
						var wallsY = 896; 
						break;
				}
				break;
			case 4: // grey brick
				switch (wallDir) {
					case "up":
						var wallsX = 0; 
						var wallsY = 512; 
						break;
					case "down":
						var wallsX = 0; 
						var wallsY = 512; 
						break;
					case "left":
						var wallsX = 128; 
						var wallsY = 512; 
						break;
					case "right":
						var wallsX = 128; 
						var wallsY = 512; 
						break;
				}
				break;
			case 5: // wood
				switch (wallDir) {
					case "up":
						var wallsX = 0; 
						var wallsY = 128; 
						break;
					case "down":
						var wallsX = 0; 
						var wallsY = 128; 
						break;
					case "left":
						var wallsX = 128; 
						var wallsY = 128; 
						break;
					case "right":
						var wallsX = 128; 
						var wallsY = 128; 
						break;
				}
				break;
			case 22: // wood decoration 1
				switch (wallDir) {
					case "up":
						var wallsX = 256; 
						var wallsY = 128; 
						break;
					case "down":
						var wallsX = 256; 
						var wallsY = 128; 
						break;
					case "left":
						var wallsX = 384; 
						var wallsY = 128; 
						break;
					case "right":
						var wallsX = 384; 
						var wallsY = 128; 
						break;
				}
				break;
			case 23: // wood decoration 2
				switch (wallDir) {
					case "up":
						var wallsX = 512; 
						var wallsY = 128; 
						break;
					case "down":
						var wallsX = 512; 
						var wallsY = 128; 
						break;
					case "left":
						var wallsX = 640; 
						var wallsY = 128; 
						break;
					case "right":
						var wallsX = 640; 
						var wallsY = 128; 
						break;
				}
				break;
			case 24: // wood decoration 3
				switch (wallDir) {
					case "up":
						var wallsX = 768; 
						var wallsY = 128; 
						break;
					case "down":
						var wallsX = 768; 
						var wallsY = 128; 
						break;
					case "left":
						var wallsX = 896; 
						var wallsY = 128; 
						break;
					case "right":
						var wallsX = 896; 
						var wallsY = 128; 
						break;
				}
				break;
			case 6: // secret wall, grey stones
				switch (wallDir) {
					case "up":
						var wallsX = 0; 
						var wallsY = 0; 
						break;
					case "down":
						var wallsX = 0; 
						var wallsY = 0; 
						break;
					case "left":
						var wallsX = 128; 
						var wallsY = 0; 
						break;
					case "right":
						var wallsX = 128; 
						var wallsY = 0; 
						break;
				}
				break;
			case 7: // brown & grey stones
				switch (wallDir) {
					case "up":
						var wallsX = 0; 
						var wallsY = 768; 
						break;
					case "down":
						var wallsX = 0; 
						var wallsY = 768; 
						break;
					case "left":
						var wallsX = 128; 
						var wallsY = 768; 
						break;
					case "right":
						var wallsX = 128; 
						var wallsY = 768; 
						break;
				}
				break;
			case 12: // brown & grey stones decoration
				switch (wallDir) {
					case "up":
						var wallsX = 256; 
						var wallsY = 768; 
						break;
					case "down":
						var wallsX = 256; 
						var wallsY = 768; 
						break;
					case "left":
						var wallsX = 384; 
						var wallsY = 768; 
						break;
					case "right":
						var wallsX = 384; 
						var wallsY = 768; 
						break;
				}
				break;
			case 8: // brown tiles
				switch (wallDir) {
					case "up":
						var wallsX = 768; 
						var wallsY = 1024; 
						break;
					case "down":
						var wallsX = 768; 
						var wallsY = 1024; 
						break;
					case "left":
						var wallsX = 896; 
						var wallsY = 1024; 
						break;
					case "right":
						var wallsX = 896; 
						var wallsY = 1024; 
						break;
				}
				break;
			case 9: // brown stones
				switch (wallDir) {
					case "up":
						var wallsX = 512; 
						var wallsY = 1024; 
						break;
					case "down":
						var wallsX = 512; 
						var wallsY = 1024; 
						break;
					case "left":
						var wallsX = 640; 
						var wallsY = 1024; 
						break;
					case "right":
						var wallsX = 640; 
						var wallsY = 1024; 
						break;
				}
				break;
			case 10: // blueish metal
				switch (wallDir) {
					case "up":
						var wallsX = 0; 
						var wallsY = 384; 
						break;
					case "down":
						var wallsX = 0; 
						var wallsY = 384; 
						break;
					case "left":
						var wallsX = 128; 
						var wallsY = 384; 
						break;
					case "right":
						var wallsX = 128; 
						var wallsY = 384; 
						break;
				}
				break;
			case 16: // blueish metal decoration
				switch (wallDir) {
					case "up":
						var wallsX = 256; 
						var wallsY = 384; 
						break;
					case "down":
						var wallsX = 256; 
						var wallsY = 384; 
						break;
					case "left":
						var wallsX = 384; 
						var wallsY = 384; 
						break;
					case "right":
						var wallsX = 384; 
						var wallsY = 384; 
						break;
				}
				break;
			case 17: // blueish metal door
				switch (wallDir) {
					case "up":
						var wallsX = 512; 
						var wallsY = 384; 
						break;
					case "down":
						var wallsX = 512; 
						var wallsY = 384; 
						break;
					case "left":
						var wallsX = 640; 
						var wallsY = 384; 
						break;
					case "right":
						var wallsX = 640; 
						var wallsY = 384; 
						break;
				}
				break;
			case 18: // silver metal door
				switch (wallDir) {
					case "up":
						var wallsX = 512; 
						var wallsY = 512; 
						break;
					case "down":
						var wallsX = 512; 
						var wallsY = 512; 
						break;
					case "left":
						var wallsX = 640; 
						var wallsY = 512; 
						break;
					case "right":
						var wallsX = 640; 
						var wallsY = 512; 
						break;
				}
				break;
			default:
				var wallShade = "rgb(255,0,255)";
		}

		// draw the wall
		/*
			image object to use,
			x coord of the sprite in the spritesheet,
			y coord of the sprite in the spritesheet,
			width of the sprite in the spritesheet,
			height of the sprite in the spritesheet,
			x coord of the image on the canvas,
			y coord of the image on the canvas,
			width of the image on the canvas,
			height of the image on the canvas
		*/
		ctx.drawImage(
			walls,
			(textureSliceCoord * colWidth) + wallsX,
			wallsY,
			1,
			mapScale,
			i * colWidth,
			(canvas.height / 2) - (sliceHeight / 2),
			colWidth,
			sliceHeight
		);

		// ground reflects the walls	
		if (groundReflect) {
			ctx.globalAlpha = 0.1;
			ctx.drawImage(
				walls,
				(textureSliceCoord * colWidth) + wallsX,
				wallsY,
				1,
				mapScale,
				i * colWidth,
				((canvas.height / 2) - (sliceHeight / 2)) + sliceHeight,
				colWidth,
				sliceHeight
			);
			ctx.globalAlpha = 1;
		}

		// all walls drawn double height
		if (higherWalls) {
			ctx.drawImage(
				walls,
				(textureSliceCoord * colWidth) + wallsX,
				wallsY,
				1,
				mapScale,
				i * colWidth,
				((canvas.height / 2) - (sliceHeight / 2)) - sliceHeight,
				colWidth,
				sliceHeight
			);
		}

		if (showMap && showRays) {

			// draw every other (even) ray
			if (i % 2 == 0) {
				ctx.strokeStyle = colorRays;
				ctx.lineWidth = 0.5;
				ctx.beginPath();
				ctx.moveTo(plyrX, plyrY);
				ctx.lineTo(lineToX, lineToY);
				ctx.closePath();
				ctx.stroke();
			}
		}

		// set the angle for the next ray
		rayAngle -= angleInc;
	}

	if (showMap) {

		// loop through all of the tiles in the map
		for (var y = 0; y < mapH; y++) {
			for (var x = 0; x < mapW; x++) {

				// if this tile is a wall, then draw a square
				if (map[y][x] > 0) { 
					ctx.fillStyle = "rgba(255,255,255,0.3)";
					ctx.fillRect(
						x * mapScale, 
						y * mapScale, 
						mapScale, mapScale
					);
				}
			}
		}

		// draw the player dot
		ctx.fillStyle = colorPlyrMap;
		ctx.beginPath();
		ctx.arc( 
			plyrX,
			plyrY, 
			mapScale / 4, 
			0, twoPi
		);
		ctx.closePath();
		ctx.fill();

		// draw the player direction indicator
		ctx.strokeStyle = colorPlyrMap;
		ctx.lineWidth = 1;
		ctx.beginPath();
		ctx.moveTo(plyrX, plyrY);
		ctx.lineTo(
			plyrX + (Math.cos(plyrR) * mapScale),
			plyrY - (Math.sin(plyrR) * mapScale)
		);
		ctx.closePath();
		ctx.stroke();
	}

	// draw gun
	// image, x, y, width, height
	ctx.drawImage(
		gun,
		(canvas.width / 2) - 96,
		canvas.height - 192,
		192,
		192
	);

	if (showCrosshairs) {
		ctx.fillStyle = "rgba(255,255,255,0.7)";
		ctx.fillRect(
			canvas.width / 2, 
			canvas.height / 2, 
			1, 1
		);
	}

	// fps counter
	var newTime = +new Date();
	var elapsed = newTime - oldTime;
	oldTime = newTime;
	var FPS = 1000 / elapsed;
	iterCount++;
	totalFPS = totalFPS + FPS;

	info1.innerHTML = "FPS: " + FPS.toFixed(1);
	info2.innerHTML = "Average FPS: " + Math.round(totalFPS / iterCount);
	info3.innerHTML = showMap ? "On" : "Off";
	info4.innerHTML = showRays ? "On" : "Off";
	info5.innerHTML = godMode ? "On" : "Off";

	requestAnimationFrame(gameCycle);
}

gameCycle();

	</script>
</body>
</html>